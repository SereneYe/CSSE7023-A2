public Expression tryParseComplex(String input) throws ParseException, InvalidExpression {
        List<ComplexScanner.Token> tokens = ComplexScanner.tokenize(input);
        return parseWithPrecedence(tokens, 0);
    }

    public Expression parseWithPrecedence(List<ComplexScanner.Token> tokens, int cur_precedence) throws ParseException, InvalidExpression {
        if (tokens.isEmpty()) {
            return factory.createEmpty();
        }
        if (tokens.get(0).type().equals(ComplexScanner.TokenType.OP) && tokens.get(0).name().equals(
                "-")) {
            tokens.add(0, new ComplexScanner.Token(ComplexScanner.TokenType.CONST, "0"));
        }

        if (tokens.size() == 1) {
            ComplexScanner.Token token = tokens.get(0);
            if (token.type().equals(ComplexScanner.TokenType.FUNC)) {
                String[] contents = SPLIT_ON_COMMA_OUTSIDE_PARENS.split(token.contents());
                Object[] parsedContents = new Object[contents.length];
                for (int i = 0; i < contents.length; i++) {
                    parsedContents[i] = tryParseComplex(contents[i]);
                }
                return factory.createOperator(token.name(), parsedContents);
            }
            if (token.type().equals(ComplexScanner.TokenType.CONST)) {
                return factory.createConstant(Long.parseLong(token.name()));
            }
            if (token.type().equals(ComplexScanner.TokenType.REFERENCE)) {
                return factory.createReference(token.name());
            }
        } else if (tokens.size() % 2 == 1) {
            char operator = OPERATORS.get(cur_precedence);
            List<Integer> operatorIndices = new ArrayList<>();
            for (int i = 1; i < tokens.size(); i += 2) {
                ComplexScanner.Token token = tokens.get(i);
                if (token.type().equals(ComplexScanner.TokenType.OP) &&
                token.name().equals(String.valueOf(operator))) {
                    operatorIndices.add(i);
                }
            }

            if (!operatorIndices.isEmpty()) {
                List<Object> parsedTokens = new ArrayList<>();
                for (int index = 0; index < operatorIndices.size(); index++) {
                    int startIndex = index == 0 ? 0 : operatorIndices.get(index - 1) + 1;
                    int endIndex = operatorIndices.get(index);
                    List<ComplexScanner.Token> subTokens = tokens.subList(startIndex, endIndex);
                    parsedTokens.add(parseWithPrecedence(new ArrayList<>(subTokens), 0));
                }
                parsedTokens.add(parseWithPrecedence(new ArrayList<>(tokens.subList(operatorIndices.get(operatorIndices.size() - 1) + 1, tokens.size())), 0));
                return factory.createOperator(String.valueOf(operator), parsedTokens.toArray());
            }
            if (cur_precedence < OPERATORS.size() - 1) {
                return parseWithPrecedence(tokens, cur_precedence + 1);
            }
        } else {
            throw new ParseException("Invalid expression: Inconsistency between operators and " +
                    "numbers of tokens");
        }

        return factory.createEmpty();
    }